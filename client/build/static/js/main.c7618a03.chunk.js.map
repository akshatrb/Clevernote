{"version":3,"sources":["components/Home/Home.js","utils/apiEndpoints.js","utils/apiRequests.js","context/context.js","components/Sidenavbar/Sidenavbar.js","components/NoteList/NoteList.js","utils/helpers.js","components/Note/Note.js","reducer/NoteReducer.js","Clevernote.js","reportWebVitals.js","index.js"],"names":["Home","history","useHistory","class","src","autoPlay","muted","loop","className","onClick","push","BASE_URL","UPDATE_NOTE","postRequest","url","a","payload","axios","post","then","resp","data","catch","err","error","response","putRequest","put","getRequest","get","deleteRequest","delete","NotesContext","React","createContext","Sidenavbar","useState","setError","notesContext","useContext","handleCreateNote","console","log","_id","notesDispatch","type","pathname","note","icon","faCannabis","faSearch","placeholder","faPlus","to","faStickyNote","faStar","faTrash","faInfo","NoteList","props","title","match","useRouteMatch","useEffect","getNotes","endpoint","length","notesState","map","desc","timestamp","updatedAt","moment","calendar","Note","location","useLocation","params","useParams","setTitle","setDesc","setUpdatedAt","isArchive","setIsArchive","archive","filter","e","id","selectednote","handleUpdateNote","key","query","resetState","handleUnArchiveNote","handleArchiveNote","handleDeleteNote","format","faBackward","faArchive","value","onChange","target","onBlur","NoteReducer","state","action","draftNotes","unshift","index","findIndex","item","initialState","Clevernote","useReducer","notes","exact","path","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7618a03.chunk.js","sourcesContent":["import './style.scss';\nimport { \n  useHistory\n} from \"react-router-dom\";\n\nconst Home = () => {\nlet history = useHistory();\nconst redirect = () =>{\n  history.push('/all-notes')\n}\nreturn (\n  <section class=\"showcase\">\n\t\n\t\t\t<div class=\"video-container\">\n\t\t\t\t<video src=\"https://traversymedia.com/downloads/video.mov\" autoPlay={true} muted loop></video>\n\t\t\t</div>\n\t\t\t<div class=\"content\">\n        <h1>Welcome to Clevernote</h1>\n\t\t\t\t<h3>A minimalist approach to note taking.</h3>\n        <button className='btn' onClick={redirect}> \n          Enter\n\n        </button>\n\t\t\t\n\t\t\t</div>\n\t\t</section>\n)\n\n}\n\nexport default Home;","//we will have all our api endpoints here\n\nexport const BASE_URL = 'http://clevernote.arb.codes:5000'; // our server is running on port 2000\nexport const CREATE_NOTE = '/api/note';\nexport const UPDATE_NOTE = '/api/note/';\nexport const DELETE_NOTE = '/api/note/';\nexport const GET_ALL_NOTES = '/api/notes/all';\nexport const GET_TRASH_NOTES = '/api/notes/trash';\n","import axios from 'axios';\n\n//the four utility methods that we require\n\nexport const postRequest = async (url, payload = {}) => {\n    const data = await axios.post(url, payload)\n        .then(resp => resp.data)\n        .catch(err => (\n            { error: err.response.data }\n        ));\n    return data;\n}\n\nexport const putRequest = async (url, payload = {}) => {\n    const data = await axios.put(url, payload)\n    .then(resp =>resp.data)\n    .catch(err => (\n        { error: err.response.data }\n    ));\n    return data;\n}\n\nexport const getRequest = async (url, payload = {}) => { //pass the url\n    const data = await axios.get(url, payload) \n    .then(resp =>resp.data)     //get response\n    .catch(err => (         // catch exception\n        { error: err.response.data }\n    ));\n    return data;\n}\n\nexport const deleteRequest = async (url, payload = {}) => {\n    const data = await axios.delete(url, payload)\n    .then(resp =>resp.data)\n    .catch(err => (\n        { error: err.response.data }\n    ));\n    return data;\n}","//In order to populate note throughout, we will use context\n\nimport React from 'react'\nexport const NotesContext = React.createContext();","import React, { useContext, useState } from 'react';\nimport './Sidenavbar.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCannabis, faSearch, faPlus, faStar, faStickyNote, faTrash, faInfo } from '@fortawesome/free-solid-svg-icons';\n\nimport { NavLink, useHistory } from 'react-router-dom'\n// util functions like getRequest, postRequest will need URLS, hence importing them from apiEndpoints.js\nimport { BASE_URL, CREATE_NOTE } from './../../utils/apiEndpoints';\nimport { postRequest } from './../../utils/apiRequests';\nimport { NotesContext } from './../../context/context';\n\n\nconst Sidenavbar = () => {\n    const [error, setError] = useState(null);\n    const notesContext = useContext(NotesContext);\n    const history = useHistory();\n\n    const handleCreateNote = async () => {\n        //calling the util function postRequest\n        const response = await postRequest(`${BASE_URL}${CREATE_NOTE}`); //passing in concatenation format\n        console.log(response);\n        if (response.error){\n            setError(response.error);\n            return false;\n        }\n        if(response._id){\n            notesContext.notesDispatch({ type: 'createNoteSuccess', payload: response })\n            history.push({\n                pathname: `/all-notes/${response._id}`,\n                note: response // we will update our location.note from here -> useEffect in Note.js\n            })\n        }\n    }\n\n\n    return (\n        <div className=\"sidenavbar\">\n            <div className=\"sidenavbar-top\">\n                <div className=\"sidenavbar-top__profile\">\n                    <div className=\"profile-icon\">\n                        C\n                    </div>\n                    <div className=\"profile-title\">\n                        Clevernote\n                        <FontAwesomeIcon className=\"icon\" icon={faCannabis} />\n                    </div>\n                </div>\n                <div className=\"sidenavbar-top__search\">\n                    <div className=\"search-block\">\n                        <FontAwesomeIcon icon ={faSearch} />\n                        <input placeholder=\"Search\" />\n\n                    </div>\n                </div>\n                <div className=\"sidenavbar-top__create-note\">\n                    <div className=\"create-note-btn\" onClick={handleCreateNote}>\n                    <FontAwesomeIcon className=\"icon\" icon={faPlus} />\n                    <div className=\"title\">\n                        New Note\n                    </div>\n                    </div>\n                </div>\n                <div className=\"sidenavbar-top__menu-item\">\n                    <ul>\n                        <li>\n                            <NavLink to=\"/all-notes\">\n                            <FontAwesomeIcon className=\"icon\" icon={faStickyNote} />\n                            All Notes\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/important\">\n                            <FontAwesomeIcon className=\"icon\" icon={faStar} />\n                            Important\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/trash\">\n                            <FontAwesomeIcon className=\"icon\" icon={faTrash} />\n                            Trash\n                            </NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div className=\"sidenavbar-bottom\">\n                <div className=\"sidenavbar-bottom__need-help\">\n                    <FontAwesomeIcon className=\"icon\" icon={faInfo} />\n                    Need help?\n                </div>\n            </div>\n        </div>\n    )\n    }\nexport default Sidenavbar;\n","import React, { useContext, useEffect, useState } from 'react';\nimport './NoteList.scss';\nimport {\n    useRouteMatch,\n    useHistory,\n    NavLink //for click functionality ie. on clicking note in NoteList, it should appear in the noteTextArea\n} from \"react-router-dom\"; //for match.url\nimport { BASE_URL, GET_ALL_NOTES, GET_TRASH_NOTES } from './../../utils/apiEndpoints';\nimport { getRequest } from './../../utils/apiRequests';\nimport { NotesContext } from './../../context/context';\nimport { listFormatDate } from './../../utils/helpers';\n\n\nconst NoteList = (props) => {\n    const [error, setError] = useState(null)\n    const notesContext = useContext(NotesContext);\n    const { title } = props;\n    const match = useRouteMatch();\n    const history = useHistory();\n    useEffect(() => {\n        // console.log(match.url); Done for testing; ignore\n        getNotes()\n    }, [match.url]) //we need to call this useEffect whenever the match.url is changing\n\n    const getNotes = async () => {\n        let endpoint = '';\n        if (match.url == '/all-notes') {\n            endpoint = GET_ALL_NOTES;\n        } else if (match.url == '/trash') {\n            endpoint = GET_TRASH_NOTES;\n        } else {\n            return;\n        }\n\n        const response = await getRequest(`${BASE_URL}${endpoint}`)\n        if (response.error) {\n            setError(response.error);\n            return false;\n        }\n        notesContext.notesDispatch({ type: 'getAllNotesSuccess', payload: response });\n        if (response.length > 0) {\n            history.push({\n                pathname: `${match.url}/${response[0]._id}`, //concatenating match.url and first note._id\n                note: response[0]\n            })\n        }\n    }\n\n    return (\n        <div className=\"note-list\">\n            <div className=\"note-list__header\">\n                <div className=\"note-list__header-title\">\n                    <h1> {title} </h1>\n                </div>\n                <div className=\"note-list__header-sub-head\">\n                    <div className=\"note-count\">\n                        {notesContext.notesState.length} notes\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"note-list__body\">\n                {\n                    (notesContext.notesState.length > 0) ? notesContext.notesState.map((note) => (\n                        <NavLink key={note._id}className=\"note-card\" to={\n                            {\n                                pathname: `${match.url}/${note._id}`,\n                                note\n                            }\n                        }>\n                            <div className=\"note-card__head\">\n                                <div className=\"note-card__title\">\n                                    {note.title}\n                                </div>\n\n                                <div className=\"note-card__desc\">\n                                    {note.desc}\n                                </div>\n\n                            </div>\n                            <div className=\"note-card__date\">\n                                {listFormatDate (note.updatedAt)}\n                             </div>\n                        </NavLink> //for click functionality we're using NavLink\n                    )\n                    ) : <div className=\"empty-state\">No data found</div>\n                }\n\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default NoteList;\n","//made for fixing the timestamps that appear coded throughout\n\nimport moment from 'moment';\n\nexport const listFormatDate = ( timestamp ) => {\n    return moment(timestamp).calendar();\n\n}\n\nexport const noteFormatDate = (timestamp) => {\n    return moment(timestamp).format('ll');\n    \n}","import React, { useState, useEffect, useContext } from 'react';\nimport './Note.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArchive, faBackward, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { \n    useLocation,\n    useParams,\n    useHistory\n } from \"react-router-dom\";\nimport { deleteRequest, putRequest } from './../../utils/apiRequests';\nimport { BASE_URL, DELETE_NOTE, UPDATE_NOTE } from './../../utils/apiEndpoints';\nimport { NotesContext } from './../../context/context';\nimport { noteFormatDate } from './../../utils/helpers';\n\nconst Note = () => {\n    const location = useLocation();\n    const params = useParams();\n    const [title, setTitle] = useState('');\n    const [desc, setDesc] = useState('');\n    const notesContext = useContext(NotesContext);\n    const [updatedAt, setUpdatedAt] = useState('');\n    const [isArchive, setIsArchive] = useState(0);\n    const [error, setError] = useState(null);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (location.note) {\n            setTitle(location.note.title)\n            setDesc(location.note.desc)\n            setUpdatedAt(location.note.updatedAt)\n            setIsArchive(location.note.archive)\n        }\n    }, [location.note]) // we will call this useEffect wherever our location.note is changing\n\n    useEffect(() => {\n        if ( notesContext.notesState.length > 0) {\n            const [selectednote] =  notesContext.notesState.filter((e) => e._id === params.id);\n            if (selectednote) {\n                setTitle(selectednote.title)\n                setDesc(selectednote.desc)\n                setUpdatedAt(selectednote.updatedAt)\n                setIsArchive(selectednote.archive)\n            }\n        }\n    }, [notesContext.notesState])\n\n\n    const handleTitleChange = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const handleDescChange = (e) => {\n        setDesc(e.target.value)\n    }\n\n    const handleUpdateNote = async (key) => {\n        let query = {};\n        if (key == 'title') {\n            query['title'] = title;\n        } else if (key == 'desc') {\n            query['desc'] = desc;\n        }\n        \n        //Now our PUT request\n        const response = await putRequest(`${BASE_URL}${UPDATE_NOTE}${params.id}`, query);\n        if (response.error) {\n            setError(response.error);\n            return false;\n        }\n        notesContext.notesDispatch({ type: 'updateNoteSuccess', payload: response, id: params.id })\n    }\n\n    const resetState =() => {\n        setTitle('');\n        setDesc('');\n        setUpdatedAt('');\n        setIsArchive(0);\n        setError(null);\n    }\n\n    const handleUnArchiveNote = async () => {\n        let query ={\n            archive: 0\n        }\n        const response = await putRequest(`${BASE_URL}${UPDATE_NOTE}${params.id}`, query);\n        if(response.error) {\n            setError(response.error);\n            return false;\n        }\n        notesContext.notesDispatch({type: 'archiveNoteSuccess', id: params.id})\n        resetState();\n        history.push(`/trash`)\n    }\n\n    const handleArchiveNote = async () => {\n        let query = {\n            archive: 1\n        };\n        const response = await putRequest(`${BASE_URL}${UPDATE_NOTE}${params.id}`, query);\n        if(response.error){ //error hnadling\n            setError(response.error);\n            return false;\n        }\n        notesContext.notesDispatch({type: 'archiveNoteSuccess', id: params.id})\n            //if update is succesfull, we will dispatch archiveNoteSuccess with the note id\n        resetState(); //since the note is deleted, we need to reset all the states\n        history.push(`/all-notes`) //since the note is deleted so it is no longer available in all-notes therefore we need to do history.push\n    }\n\n    const handleDeleteNote = async () => {\n        const response = await deleteRequest(`${BASE_URL}${DELETE_NOTE}${params.id}`);\n        if(response.error){\n            setError(response.error);\n            return false;\n        }\n        notesContext.notesDispatch({ type: 'deleteNoteSuccess', id: response})\n        resetState();\n        history.push('/trash');\n    }\n\n    return (\n        <div className=\"note\">\n            <div className=\"note__header\">\n                <div className=\"note__header-date\">\n                    Last edited on {noteFormatDate(updatedAt)}\n                </div>\n                <div className=\"note__header-action-btn\">\n                    {!isArchive ? (\n                        <div className=\"action-btn\" onClick={handleArchiveNote}>\n                            <FontAwesomeIcon icon={faArchive} />\n                        </div>\n                    ) : (\n                        <>\n                        <div className=\"action-btn\">\n                            <FontAwesomeIcon icon={faBackward} onClick={handleUnArchiveNote} />\n                        </div>\n                        <div className=\"action-btn\">\n                            <FontAwesomeIcon icon={faTrash} onClick={handleDeleteNote}/>\n                        </div>\n                        </>\n                    )}\n                    \n                    \n                </div>\n            </div>\n\n                        \n            <div className=\"note__body\">\n                <div className=\"note__body-head\">\n                    <input value={title} placeholder=\"Title\" onChange={handleTitleChange} onBlur={() => handleUpdateNote('title')} />\n                </div>\n                <div className=\"note__body-content\">\n                    <textarea value={desc} placeholder=\"Start writing\" onChange={handleDescChange} onBlur={() => handleUpdateNote('desc')} />\n                </div>\n            </div>\n        </div>\n    )\n}\n//onBlur used above is to update the text that we type in the DB\nexport default Note;\n ","//reducer is an immutable function so we can't alter the state\nconst NoteReducer = (state, action) => {\n    //we are not altering the original state since it's immutable, therefore we're using a spread operator and altering a different state here\n    let draftNotes = [...state];\n    switch (action.type) {\n        case 'getAllNotesSuccess':\n            return action.payload;\n        case 'createNoteSuccess':\n            draftNotes.unshift(action.payload);\n            return draftNotes;\n        case 'updateNoteSuccess':\n            // we're finding the updated note index by looping through them\n            let index = state.findIndex(item => item._id === action.id); \n            \n            //updating the notes by index. using spread operator to get it's existing keys.\n            //then we're spreading action.payload to get the updated fields.\n            draftNotes[index] = { ...draftNotes[index], ...action.payload };\n            return draftNotes;\n        case 'archiveNoteSuccess':\n            //looping through the notes and returning those which are not archive\n            return draftNotes.filter((item) => item._id !== action.id); \n        case 'deleteNoteSuccess':\n            //similarly returning those notes which aren't deleted\n            return draftNotes.filter((item) => item._id !== action.id);\n        default:\n            return state;\n    }\n}\n\nexport default NoteReducer;","import React, { useReducer } from 'react';\nimport './Clevernote.scss';\nimport Home from './components/Home/Home';\nimport Sidenavbar from './components/Sidenavbar/Sidenavbar';\nimport NoteList from './components/NoteList/NoteList';\nimport Note from './components/Note/Note';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport NoteReducer from './reducer/NoteReducer';\nimport { NotesContext } from './context/context';\n\nconst initialState = [];\n\n//We've changed the orientation on line 24 where <Note /> !! If something breaks, revert from Master branch\n//Wrapping our div with Router\n\nfunction Clevernote() {\n  const [notes, notesDispatch] = useReducer(NoteReducer, initialState); //react hook useReducer, passing NoteReducer and initial state into it.\n\n  //wrapping everything with notesContext.provider inside router\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home title=\"Home\" />\n        </Route>\n\n        <NotesContext.Provider value={{ notesState: notes, notesDispatch }}>\n          <div className=\"Clevernote\">\n            <Sidenavbar />\n\n            <Route path=\"/all-notes\">\n              <NoteList title=\"All Notes\" />\n              <Route path=\"/all-notes/:id\">\n                <Note />\n              </Route>\n            </Route>\n            <Route path=\"/trash\">\n              <NoteList title=\"Trash\" />\n              <Route path=\"/trash/:id\">\n                <Note />\n              </Route>\n            </Route>\n\n          </div>\n        </NotesContext.Provider>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Clevernote;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Clevernote from './Clevernote';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Clevernote />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}